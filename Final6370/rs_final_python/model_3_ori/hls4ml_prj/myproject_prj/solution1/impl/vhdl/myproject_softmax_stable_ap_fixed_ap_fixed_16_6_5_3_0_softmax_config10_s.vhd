-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config10_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    data_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_4_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_5_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_6_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_7_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_8_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_9_val : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config10_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal exp_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce0 : STD_LOGIC;
    signal exp_table_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce1 : STD_LOGIC;
    signal exp_table_q1 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce2 : STD_LOGIC;
    signal exp_table_q2 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce3 : STD_LOGIC;
    signal exp_table_q3 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_address4 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce4 : STD_LOGIC;
    signal exp_table_q4 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_address5 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce5 : STD_LOGIC;
    signal exp_table_q5 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_address6 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce6 : STD_LOGIC;
    signal exp_table_q6 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_address7 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce7 : STD_LOGIC;
    signal exp_table_q7 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_address8 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce8 : STD_LOGIC;
    signal exp_table_q8 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_address9 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce9 : STD_LOGIC;
    signal exp_table_q9 : STD_LOGIC_VECTOR (17 downto 0);
    signal invert_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table_ce0 : STD_LOGIC;
    signal invert_table_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal data_9_val_read_reg_1491 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal data_8_val_read_reg_1498 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_7_val_read_reg_1505 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_6_val_read_reg_1510 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_5_val_read_reg_1515 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_4_val_read_reg_1520 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_3_val_read_reg_1525 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_2_val_read_reg_1530 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_1_val_read_reg_1535 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_0_val_read_reg_1540 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_6_fu_392_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_6_reg_1545 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln245_7_fu_979_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_7_reg_1566 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_9_fu_1005_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_9_reg_1571 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_11_fu_1031_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_11_reg_1576 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_13_fu_1057_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_13_reg_1581 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_15_fu_1083_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_15_reg_1586 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_17_fu_1109_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_17_reg_1591 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_19_fu_1135_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_19_reg_1596 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_res_reg_1601 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_reg_1601_pp0_iter3_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_1_reg_1607 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_1_reg_1607_pp0_iter3_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_2_reg_1613 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_2_reg_1613_pp0_iter3_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_3_reg_1654 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_4_reg_1659 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_5_reg_1664 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_6_reg_1669 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_7_reg_1674 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_8_reg_1679 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_9_reg_1684 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln255_fu_894_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln255_1_fu_925_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_2_fu_956_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_3_fu_1143_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_4_fu_1147_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_5_fu_1151_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_6_fu_1155_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_7_fu_1159_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_8_fu_1163_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_9_fu_1167_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_fu_1232_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln65_fu_260_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_fu_260_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_fu_272_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_fu_272_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_1_fu_280_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_1_fu_280_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_1_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_1_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_1_fu_292_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_1_fu_292_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_fu_272_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_1_fu_292_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_2_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_2_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_3_fu_320_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_3_fu_320_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_3_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_3_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_3_fu_332_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_3_fu_332_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_4_fu_340_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_4_fu_340_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_4_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_4_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_4_fu_352_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_4_fu_352_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_3_fu_332_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_4_fu_352_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_5_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_5_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_2_fu_312_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_5_fu_372_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_6_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_6_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_7_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_7_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_7_fu_410_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_8_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_8_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_max_fu_427_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln245_fu_434_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln245_1_fu_437_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_fu_441_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_fu_447_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_455_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_2_fu_481_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_1_fu_484_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_12_fu_490_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_498_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_2_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_3_fu_524_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_2_fu_527_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_fu_533_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_541_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_4_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_4_fu_567_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_3_fu_570_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_16_fu_576_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_584_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_6_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_5_fu_610_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_4_fu_613_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_18_fu_619_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_627_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_8_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_6_fu_653_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_5_fu_656_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_20_fu_662_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_670_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_10_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_7_fu_696_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_6_fu_699_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_22_fu_705_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_713_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_12_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_8_fu_739_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_7_fu_742_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_24_fu_748_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_756_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_14_fu_764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_9_fu_782_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_8_fu_785_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_26_fu_791_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_799_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_16_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln245_10_fu_825_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln245_9_fu_828_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_fu_834_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_842_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_18_fu_850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln245_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_1_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_fu_868_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_876_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_1_fu_886_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_1_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_3_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_2_fu_899_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_907_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_3_fu_917_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_2_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_5_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_4_fu_930_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_938_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln245_5_fu_948_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_3_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_7_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_6_fu_961_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_969_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_4_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_9_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_8_fu_987_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_995_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_5_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_11_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_10_fu_1013_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_1021_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_6_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_13_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_12_fu_1039_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_1047_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_7_fu_770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_15_fu_776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_14_fu_1065_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_1073_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_8_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_17_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_16_fu_1091_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_1099_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln245_9_fu_856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln245_19_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_18_fu_1117_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_1125_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln50_fu_1171_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_fu_1171_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_1_fu_1177_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_1_fu_1177_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_1_fu_1177_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_2_fu_1183_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_2_fu_1183_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_fu_1171_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_4_fu_1195_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_4_fu_1195_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_5_fu_1201_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_6_fu_1205_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_4_fu_1195_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_7_fu_1210_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_3_fu_1189_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_sum_fu_1216_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_9_fu_1222_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln268_fu_1244_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln268_fu_1237_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln268_fu_1244_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln268_1_fu_1263_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln268_1_fu_1263_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln268_2_fu_1282_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln268_2_fu_1282_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln268_3_fu_1301_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln268_3_fu_1301_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln268_4_fu_1320_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln268_4_fu_1320_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln268_5_fu_1339_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln268_5_fu_1339_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln268_6_fu_1358_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln268_6_fu_1358_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln268_7_fu_1377_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln268_7_fu_1377_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln268_8_fu_1396_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln268_8_fu_1396_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln268_9_fu_1415_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln268_9_fu_1415_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to3 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mul_18s_18s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config10_s_exp_table_ROM_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address4 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address5 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address6 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address7 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address8 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address9 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce9 : IN STD_LOGIC;
        q9 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config10_s_invert_table_Rcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    exp_table_U : component myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config10_s_exp_table_ROM_bkb
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table_address0,
        ce0 => exp_table_ce0,
        q0 => exp_table_q0,
        address1 => exp_table_address1,
        ce1 => exp_table_ce1,
        q1 => exp_table_q1,
        address2 => exp_table_address2,
        ce2 => exp_table_ce2,
        q2 => exp_table_q2,
        address3 => exp_table_address3,
        ce3 => exp_table_ce3,
        q3 => exp_table_q3,
        address4 => exp_table_address4,
        ce4 => exp_table_ce4,
        q4 => exp_table_q4,
        address5 => exp_table_address5,
        ce5 => exp_table_ce5,
        q5 => exp_table_q5,
        address6 => exp_table_address6,
        ce6 => exp_table_ce6,
        q6 => exp_table_q6,
        address7 => exp_table_address7,
        ce7 => exp_table_ce7,
        q7 => exp_table_q7,
        address8 => exp_table_address8,
        ce8 => exp_table_ce8,
        q8 => exp_table_q8,
        address9 => exp_table_address9,
        ce9 => exp_table_ce9,
        q9 => exp_table_q9);

    invert_table_U : component myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config10_s_invert_table_Rcud
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table_address0,
        ce0 => invert_table_ce0,
        q0 => invert_table_q0);

    mul_18s_18s_30_1_1_U94 : component myproject_mul_18s_18s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln268_fu_1244_p0,
        din1 => exp_res_reg_1601_pp0_iter3_reg,
        dout => mul_ln268_fu_1244_p2);

    mul_18s_18s_30_1_1_U95 : component myproject_mul_18s_18s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln268_1_fu_1263_p0,
        din1 => exp_res_1_reg_1607_pp0_iter3_reg,
        dout => mul_ln268_1_fu_1263_p2);

    mul_18s_18s_30_1_1_U96 : component myproject_mul_18s_18s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln268_2_fu_1282_p0,
        din1 => exp_res_2_reg_1613_pp0_iter3_reg,
        dout => mul_ln268_2_fu_1282_p2);

    mul_18s_18s_30_1_1_U97 : component myproject_mul_18s_18s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln268_3_fu_1301_p0,
        din1 => exp_res_3_reg_1654,
        dout => mul_ln268_3_fu_1301_p2);

    mul_18s_18s_30_1_1_U98 : component myproject_mul_18s_18s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln268_4_fu_1320_p0,
        din1 => exp_res_4_reg_1659,
        dout => mul_ln268_4_fu_1320_p2);

    mul_18s_18s_30_1_1_U99 : component myproject_mul_18s_18s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln268_5_fu_1339_p0,
        din1 => exp_res_5_reg_1664,
        dout => mul_ln268_5_fu_1339_p2);

    mul_18s_18s_30_1_1_U100 : component myproject_mul_18s_18s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln268_6_fu_1358_p0,
        din1 => exp_res_6_reg_1669,
        dout => mul_ln268_6_fu_1358_p2);

    mul_18s_18s_30_1_1_U101 : component myproject_mul_18s_18s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln268_7_fu_1377_p0,
        din1 => exp_res_7_reg_1674,
        dout => mul_ln268_7_fu_1377_p2);

    mul_18s_18s_30_1_1_U102 : component myproject_mul_18s_18s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln268_8_fu_1396_p0,
        din1 => exp_res_8_reg_1679,
        dout => mul_ln268_8_fu_1396_p2);

    mul_18s_18s_30_1_1_U103 : component myproject_mul_18s_18s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln268_9_fu_1415_p0,
        din1 => exp_res_9_reg_1684,
        dout => mul_ln268_9_fu_1415_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                data_0_val_read_reg_1540 <= data_0_val;
                data_1_val_read_reg_1535 <= data_1_val;
                data_2_val_read_reg_1530 <= data_2_val;
                data_3_val_read_reg_1525 <= data_3_val;
                data_4_val_read_reg_1520 <= data_4_val;
                data_5_val_read_reg_1515 <= data_5_val;
                data_6_val_read_reg_1510 <= data_6_val;
                data_7_val_read_reg_1505 <= data_7_val;
                data_8_val_read_reg_1498 <= data_8_val;
                data_9_val_read_reg_1491 <= data_9_val;
                select_ln245_11_reg_1576 <= select_ln245_11_fu_1031_p3;
                select_ln245_13_reg_1581 <= select_ln245_13_fu_1057_p3;
                select_ln245_15_reg_1586 <= select_ln245_15_fu_1083_p3;
                select_ln245_17_reg_1591 <= select_ln245_17_fu_1109_p3;
                select_ln245_19_reg_1596 <= select_ln245_19_fu_1135_p3;
                select_ln245_7_reg_1566 <= select_ln245_7_fu_979_p3;
                select_ln245_9_reg_1571 <= select_ln245_9_fu_1005_p3;
                select_ln65_6_reg_1545 <= select_ln65_6_fu_392_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then
                exp_res_1_reg_1607 <= exp_table_q8;
                exp_res_2_reg_1613 <= exp_table_q7;
                exp_res_reg_1601 <= exp_table_q9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                exp_res_1_reg_1607_pp0_iter3_reg <= exp_res_1_reg_1607;
                exp_res_2_reg_1613_pp0_iter3_reg <= exp_res_2_reg_1613;
                exp_res_reg_1601_pp0_iter3_reg <= exp_res_reg_1601;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then
                exp_res_3_reg_1654 <= exp_table_q6;
                exp_res_4_reg_1659 <= exp_table_q5;
                exp_res_5_reg_1664 <= exp_table_q4;
                exp_res_6_reg_1669 <= exp_table_q3;
                exp_res_7_reg_1674 <= exp_table_q2;
                exp_res_8_reg_1679 <= exp_table_q1;
                exp_res_9_reg_1684 <= exp_table_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln50_1_fu_1177_p0 <= exp_table_q3;
    add_ln50_1_fu_1177_p1 <= exp_table_q5;
    add_ln50_1_fu_1177_p2 <= std_logic_vector(signed(add_ln50_1_fu_1177_p0) + signed(add_ln50_1_fu_1177_p1));
    add_ln50_2_fu_1183_p1 <= exp_table_q2;
    add_ln50_2_fu_1183_p2 <= std_logic_vector(unsigned(add_ln50_1_fu_1177_p2) + unsigned(add_ln50_2_fu_1183_p1));
    add_ln50_3_fu_1189_p2 <= std_logic_vector(unsigned(add_ln50_2_fu_1183_p2) + unsigned(add_ln50_fu_1171_p2));
    add_ln50_4_fu_1195_p0 <= exp_table_q4;
    add_ln50_4_fu_1195_p1 <= exp_table_q6;
    add_ln50_4_fu_1195_p2 <= std_logic_vector(signed(add_ln50_4_fu_1195_p0) + signed(add_ln50_4_fu_1195_p1));
    add_ln50_5_fu_1201_p2 <= std_logic_vector(signed(exp_res_reg_1601) + signed(exp_res_1_reg_1607));
    add_ln50_6_fu_1205_p2 <= std_logic_vector(unsigned(add_ln50_5_fu_1201_p2) + unsigned(exp_res_2_reg_1613));
    add_ln50_7_fu_1210_p2 <= std_logic_vector(unsigned(add_ln50_6_fu_1205_p2) + unsigned(add_ln50_4_fu_1195_p2));
    add_ln50_fu_1171_p0 <= exp_table_q0;
    add_ln50_fu_1171_p1 <= exp_table_q1;
    add_ln50_fu_1171_p2 <= std_logic_vector(signed(add_ln50_fu_1171_p0) + signed(add_ln50_fu_1171_p1));
    and_ln245_1_fu_512_p2 <= (xor_ln245_2_fu_506_p2 and tmp_13_fu_498_p3);
    and_ln245_2_fu_555_p2 <= (xor_ln245_4_fu_549_p2 and tmp_15_fu_541_p3);
    and_ln245_3_fu_598_p2 <= (xor_ln245_6_fu_592_p2 and tmp_17_fu_584_p3);
    and_ln245_4_fu_641_p2 <= (xor_ln245_8_fu_635_p2 and tmp_19_fu_627_p3);
    and_ln245_5_fu_684_p2 <= (xor_ln245_10_fu_678_p2 and tmp_21_fu_670_p3);
    and_ln245_6_fu_727_p2 <= (xor_ln245_12_fu_721_p2 and tmp_23_fu_713_p3);
    and_ln245_7_fu_770_p2 <= (xor_ln245_14_fu_764_p2 and tmp_25_fu_756_p3);
    and_ln245_8_fu_813_p2 <= (xor_ln245_16_fu_807_p2 and tmp_27_fu_799_p3);
    and_ln245_9_fu_856_p2 <= (xor_ln245_18_fu_850_p2 and tmp_29_fu_842_p3);
    and_ln245_fu_469_p2 <= (xor_ln245_fu_463_p2 and tmp_11_fu_455_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to3)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to3 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= mul_ln268_fu_1244_p2(29 downto 14);
    ap_return_1 <= mul_ln268_1_fu_1263_p2(29 downto 14);
    ap_return_2 <= mul_ln268_2_fu_1282_p2(29 downto 14);
    ap_return_3 <= mul_ln268_3_fu_1301_p2(29 downto 14);
    ap_return_4 <= mul_ln268_4_fu_1320_p2(29 downto 14);
    ap_return_5 <= mul_ln268_5_fu_1339_p2(29 downto 14);
    ap_return_6 <= mul_ln268_6_fu_1358_p2(29 downto 14);
    ap_return_7 <= mul_ln268_7_fu_1377_p2(29 downto 14);
    ap_return_8 <= mul_ln268_8_fu_1396_p2(29 downto 14);
    ap_return_9 <= mul_ln268_9_fu_1415_p2(29 downto 14);
    exp_sum_fu_1216_p2 <= std_logic_vector(unsigned(add_ln50_7_fu_1210_p2) + unsigned(add_ln50_3_fu_1189_p2));
    exp_table_address0 <= zext_ln255_9_fu_1167_p1(10 - 1 downto 0);
    exp_table_address1 <= zext_ln255_8_fu_1163_p1(10 - 1 downto 0);
    exp_table_address2 <= zext_ln255_7_fu_1159_p1(10 - 1 downto 0);
    exp_table_address3 <= zext_ln255_6_fu_1155_p1(10 - 1 downto 0);
    exp_table_address4 <= zext_ln255_5_fu_1151_p1(10 - 1 downto 0);
    exp_table_address5 <= zext_ln255_4_fu_1147_p1(10 - 1 downto 0);
    exp_table_address6 <= zext_ln255_3_fu_1143_p1(10 - 1 downto 0);
    exp_table_address7 <= zext_ln255_2_fu_956_p1(10 - 1 downto 0);
    exp_table_address8 <= zext_ln255_1_fu_925_p1(10 - 1 downto 0);
    exp_table_address9 <= zext_ln255_fu_894_p1(10 - 1 downto 0);

    exp_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            exp_table_ce0 <= ap_const_logic_1;
        else 
            exp_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            exp_table_ce1 <= ap_const_logic_1;
        else 
            exp_table_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce2_assign_proc : process(ap_enable_reg_pp0_iter2, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            exp_table_ce2 <= ap_const_logic_1;
        else 
            exp_table_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce3_assign_proc : process(ap_enable_reg_pp0_iter2, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            exp_table_ce3 <= ap_const_logic_1;
        else 
            exp_table_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce4_assign_proc : process(ap_enable_reg_pp0_iter2, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            exp_table_ce4 <= ap_const_logic_1;
        else 
            exp_table_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce5_assign_proc : process(ap_enable_reg_pp0_iter2, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            exp_table_ce5 <= ap_const_logic_1;
        else 
            exp_table_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce6_assign_proc : process(ap_enable_reg_pp0_iter2, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            exp_table_ce6 <= ap_const_logic_1;
        else 
            exp_table_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce7_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table_ce7 <= ap_const_logic_1;
        else 
            exp_table_ce7 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce8_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table_ce8 <= ap_const_logic_1;
        else 
            exp_table_ce8 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce9_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table_ce9 <= ap_const_logic_1;
        else 
            exp_table_ce9 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln65_1_fu_280_p0 <= data_2_val;
    icmp_ln65_1_fu_280_p1 <= data_3_val;
    icmp_ln65_1_fu_280_p2 <= "1" when (signed(icmp_ln65_1_fu_280_p0) < signed(icmp_ln65_1_fu_280_p1)) else "0";
    icmp_ln65_2_fu_300_p2 <= "1" when (signed(select_ln65_fu_272_p3) < signed(select_ln65_1_fu_292_p3)) else "0";
    icmp_ln65_3_fu_320_p0 <= data_4_val;
    icmp_ln65_3_fu_320_p1 <= data_5_val;
    icmp_ln65_3_fu_320_p2 <= "1" when (signed(icmp_ln65_3_fu_320_p0) < signed(icmp_ln65_3_fu_320_p1)) else "0";
    icmp_ln65_4_fu_340_p0 <= data_6_val;
    icmp_ln65_4_fu_340_p1 <= data_7_val;
    icmp_ln65_4_fu_340_p2 <= "1" when (signed(icmp_ln65_4_fu_340_p0) < signed(icmp_ln65_4_fu_340_p1)) else "0";
    icmp_ln65_5_fu_360_p2 <= "1" when (signed(select_ln65_3_fu_332_p3) < signed(select_ln65_4_fu_352_p3)) else "0";
    icmp_ln65_6_fu_380_p2 <= "1" when (signed(select_ln65_2_fu_312_p3) < signed(select_ln65_5_fu_372_p3)) else "0";
    icmp_ln65_7_fu_400_p2 <= "1" when (signed(data_8_val_read_reg_1498) < signed(data_9_val_read_reg_1491)) else "0";
    icmp_ln65_8_fu_416_p2 <= "1" when (signed(select_ln65_6_reg_1545) < signed(select_ln65_7_fu_410_p3)) else "0";
    icmp_ln65_fu_260_p0 <= data_0_val;
    icmp_ln65_fu_260_p1 <= data_1_val;
    icmp_ln65_fu_260_p2 <= "1" when (signed(icmp_ln65_fu_260_p0) < signed(icmp_ln65_fu_260_p1)) else "0";
    invert_table_address0 <= zext_ln265_fu_1232_p1(10 - 1 downto 0);

    invert_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            invert_table_ce0 <= ap_const_logic_1;
        else 
            invert_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln268_1_fu_1263_p0 <= sext_ln268_fu_1237_p1(18 - 1 downto 0);
    mul_ln268_2_fu_1282_p0 <= sext_ln268_fu_1237_p1(18 - 1 downto 0);
    mul_ln268_3_fu_1301_p0 <= sext_ln268_fu_1237_p1(18 - 1 downto 0);
    mul_ln268_4_fu_1320_p0 <= sext_ln268_fu_1237_p1(18 - 1 downto 0);
    mul_ln268_5_fu_1339_p0 <= sext_ln268_fu_1237_p1(18 - 1 downto 0);
    mul_ln268_6_fu_1358_p0 <= sext_ln268_fu_1237_p1(18 - 1 downto 0);
    mul_ln268_7_fu_1377_p0 <= sext_ln268_fu_1237_p1(18 - 1 downto 0);
    mul_ln268_8_fu_1396_p0 <= sext_ln268_fu_1237_p1(18 - 1 downto 0);
    mul_ln268_9_fu_1415_p0 <= sext_ln268_fu_1237_p1(18 - 1 downto 0);
    mul_ln268_fu_1244_p0 <= sext_ln268_fu_1237_p1(18 - 1 downto 0);
    select_ln245_10_fu_1013_p3 <= 
        ap_const_lv10_1FF when (and_ln245_5_fu_684_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_11_fu_1031_p3 <= 
        select_ln245_10_fu_1013_p3 when (xor_ln245_11_fu_690_p2(0) = '1') else 
        tmp_5_fu_1021_p4;
    select_ln245_12_fu_1039_p3 <= 
        ap_const_lv10_1FF when (and_ln245_6_fu_727_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_13_fu_1057_p3 <= 
        select_ln245_12_fu_1039_p3 when (xor_ln245_13_fu_733_p2(0) = '1') else 
        tmp_6_fu_1047_p4;
    select_ln245_14_fu_1065_p3 <= 
        ap_const_lv10_1FF when (and_ln245_7_fu_770_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_15_fu_1083_p3 <= 
        select_ln245_14_fu_1065_p3 when (xor_ln245_15_fu_776_p2(0) = '1') else 
        tmp_7_fu_1073_p4;
    select_ln245_16_fu_1091_p3 <= 
        ap_const_lv10_1FF when (and_ln245_8_fu_813_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_17_fu_1109_p3 <= 
        select_ln245_16_fu_1091_p3 when (xor_ln245_17_fu_819_p2(0) = '1') else 
        tmp_8_fu_1099_p4;
    select_ln245_18_fu_1117_p3 <= 
        ap_const_lv10_1FF when (and_ln245_9_fu_856_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_19_fu_1135_p3 <= 
        select_ln245_18_fu_1117_p3 when (xor_ln245_19_fu_862_p2(0) = '1') else 
        tmp_s_fu_1125_p4;
    select_ln245_1_fu_886_p3 <= 
        select_ln245_fu_868_p3 when (xor_ln245_1_fu_475_p2(0) = '1') else 
        tmp_fu_876_p4;
    select_ln245_2_fu_899_p3 <= 
        ap_const_lv10_1FF when (and_ln245_1_fu_512_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_3_fu_917_p3 <= 
        select_ln245_2_fu_899_p3 when (xor_ln245_3_fu_518_p2(0) = '1') else 
        tmp_1_fu_907_p4;
    select_ln245_4_fu_930_p3 <= 
        ap_const_lv10_1FF when (and_ln245_2_fu_555_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_5_fu_948_p3 <= 
        select_ln245_4_fu_930_p3 when (xor_ln245_5_fu_561_p2(0) = '1') else 
        tmp_2_fu_938_p4;
    select_ln245_6_fu_961_p3 <= 
        ap_const_lv10_1FF when (and_ln245_3_fu_598_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_7_fu_979_p3 <= 
        select_ln245_6_fu_961_p3 when (xor_ln245_7_fu_604_p2(0) = '1') else 
        tmp_3_fu_969_p4;
    select_ln245_8_fu_987_p3 <= 
        ap_const_lv10_1FF when (and_ln245_4_fu_641_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln245_9_fu_1005_p3 <= 
        select_ln245_8_fu_987_p3 when (xor_ln245_9_fu_647_p2(0) = '1') else 
        tmp_4_fu_995_p4;
    select_ln245_fu_868_p3 <= 
        ap_const_lv10_1FF when (and_ln245_fu_469_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln65_1_fu_292_p1 <= data_2_val;
    select_ln65_1_fu_292_p2 <= data_3_val;
    select_ln65_1_fu_292_p3 <= 
        select_ln65_1_fu_292_p1 when (xor_ln65_1_fu_286_p2(0) = '1') else 
        select_ln65_1_fu_292_p2;
    select_ln65_2_fu_312_p3 <= 
        select_ln65_fu_272_p3 when (xor_ln65_2_fu_306_p2(0) = '1') else 
        select_ln65_1_fu_292_p3;
    select_ln65_3_fu_332_p1 <= data_4_val;
    select_ln65_3_fu_332_p2 <= data_5_val;
    select_ln65_3_fu_332_p3 <= 
        select_ln65_3_fu_332_p1 when (xor_ln65_3_fu_326_p2(0) = '1') else 
        select_ln65_3_fu_332_p2;
    select_ln65_4_fu_352_p1 <= data_6_val;
    select_ln65_4_fu_352_p2 <= data_7_val;
    select_ln65_4_fu_352_p3 <= 
        select_ln65_4_fu_352_p1 when (xor_ln65_4_fu_346_p2(0) = '1') else 
        select_ln65_4_fu_352_p2;
    select_ln65_5_fu_372_p3 <= 
        select_ln65_3_fu_332_p3 when (xor_ln65_5_fu_366_p2(0) = '1') else 
        select_ln65_4_fu_352_p3;
    select_ln65_6_fu_392_p3 <= 
        select_ln65_2_fu_312_p3 when (xor_ln65_6_fu_386_p2(0) = '1') else 
        select_ln65_5_fu_372_p3;
    select_ln65_7_fu_410_p3 <= 
        data_8_val_read_reg_1498 when (xor_ln65_7_fu_404_p2(0) = '1') else 
        data_9_val_read_reg_1491;
    select_ln65_fu_272_p1 <= data_0_val;
    select_ln65_fu_272_p2 <= data_1_val;
    select_ln65_fu_272_p3 <= 
        select_ln65_fu_272_p1 when (xor_ln65_fu_266_p2(0) = '1') else 
        select_ln65_fu_272_p2;
        sext_ln245_10_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_9_val_read_reg_1491),17));

        sext_ln245_1_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_max_fu_427_p3),17));

        sext_ln245_2_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_1_val_read_reg_1535),17));

        sext_ln245_3_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_2_val_read_reg_1530),17));

        sext_ln245_4_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_3_val_read_reg_1525),17));

        sext_ln245_5_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_4_val_read_reg_1520),17));

        sext_ln245_6_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_5_val_read_reg_1515),17));

        sext_ln245_7_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_6_val_read_reg_1510),17));

        sext_ln245_8_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_7_val_read_reg_1505),17));

        sext_ln245_9_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_8_val_read_reg_1498),17));

        sext_ln245_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_0_val_read_reg_1540),17));

        sext_ln268_fu_1237_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(invert_table_q0),30));

    sub_ln245_1_fu_484_p2 <= std_logic_vector(signed(sext_ln245_2_fu_481_p1) - signed(sext_ln245_1_fu_437_p1));
    sub_ln245_2_fu_527_p2 <= std_logic_vector(signed(sext_ln245_3_fu_524_p1) - signed(sext_ln245_1_fu_437_p1));
    sub_ln245_3_fu_570_p2 <= std_logic_vector(signed(sext_ln245_4_fu_567_p1) - signed(sext_ln245_1_fu_437_p1));
    sub_ln245_4_fu_613_p2 <= std_logic_vector(signed(sext_ln245_5_fu_610_p1) - signed(sext_ln245_1_fu_437_p1));
    sub_ln245_5_fu_656_p2 <= std_logic_vector(signed(sext_ln245_6_fu_653_p1) - signed(sext_ln245_1_fu_437_p1));
    sub_ln245_6_fu_699_p2 <= std_logic_vector(signed(sext_ln245_7_fu_696_p1) - signed(sext_ln245_1_fu_437_p1));
    sub_ln245_7_fu_742_p2 <= std_logic_vector(signed(sext_ln245_8_fu_739_p1) - signed(sext_ln245_1_fu_437_p1));
    sub_ln245_8_fu_785_p2 <= std_logic_vector(signed(sext_ln245_9_fu_782_p1) - signed(sext_ln245_1_fu_437_p1));
    sub_ln245_9_fu_828_p2 <= std_logic_vector(signed(sext_ln245_10_fu_825_p1) - signed(sext_ln245_1_fu_437_p1));
    sub_ln245_fu_441_p2 <= std_logic_vector(signed(sext_ln245_fu_434_p1) - signed(sext_ln245_1_fu_437_p1));
    tmp_10_fu_447_p3 <= sub_ln245_fu_441_p2(16 downto 16);
    tmp_11_fu_455_p3 <= sub_ln245_fu_441_p2(15 downto 15);
    tmp_12_fu_490_p3 <= sub_ln245_1_fu_484_p2(16 downto 16);
    tmp_13_fu_498_p3 <= sub_ln245_1_fu_484_p2(15 downto 15);
    tmp_14_fu_533_p3 <= sub_ln245_2_fu_527_p2(16 downto 16);
    tmp_15_fu_541_p3 <= sub_ln245_2_fu_527_p2(15 downto 15);
    tmp_16_fu_576_p3 <= sub_ln245_3_fu_570_p2(16 downto 16);
    tmp_17_fu_584_p3 <= sub_ln245_3_fu_570_p2(15 downto 15);
    tmp_18_fu_619_p3 <= sub_ln245_4_fu_613_p2(16 downto 16);
    tmp_19_fu_627_p3 <= sub_ln245_4_fu_613_p2(15 downto 15);
    tmp_1_fu_907_p4 <= sub_ln245_1_fu_484_p2(15 downto 6);
    tmp_20_fu_662_p3 <= sub_ln245_5_fu_656_p2(16 downto 16);
    tmp_21_fu_670_p3 <= sub_ln245_5_fu_656_p2(15 downto 15);
    tmp_22_fu_705_p3 <= sub_ln245_6_fu_699_p2(16 downto 16);
    tmp_23_fu_713_p3 <= sub_ln245_6_fu_699_p2(15 downto 15);
    tmp_24_fu_748_p3 <= sub_ln245_7_fu_742_p2(16 downto 16);
    tmp_25_fu_756_p3 <= sub_ln245_7_fu_742_p2(15 downto 15);
    tmp_26_fu_791_p3 <= sub_ln245_8_fu_785_p2(16 downto 16);
    tmp_27_fu_799_p3 <= sub_ln245_8_fu_785_p2(15 downto 15);
    tmp_28_fu_834_p3 <= sub_ln245_9_fu_828_p2(16 downto 16);
    tmp_29_fu_842_p3 <= sub_ln245_9_fu_828_p2(15 downto 15);
    tmp_2_fu_938_p4 <= sub_ln245_2_fu_527_p2(15 downto 6);
    tmp_3_fu_969_p4 <= sub_ln245_3_fu_570_p2(15 downto 6);
    tmp_4_fu_995_p4 <= sub_ln245_4_fu_613_p2(15 downto 6);
    tmp_5_fu_1021_p4 <= sub_ln245_5_fu_656_p2(15 downto 6);
    tmp_6_fu_1047_p4 <= sub_ln245_6_fu_699_p2(15 downto 6);
    tmp_7_fu_1073_p4 <= sub_ln245_7_fu_742_p2(15 downto 6);
    tmp_8_fu_1099_p4 <= sub_ln245_8_fu_785_p2(15 downto 6);
    tmp_9_fu_1222_p4 <= exp_sum_fu_1216_p2(17 downto 8);
    tmp_fu_876_p4 <= sub_ln245_fu_441_p2(15 downto 6);
    tmp_s_fu_1125_p4 <= sub_ln245_9_fu_828_p2(15 downto 6);
    x_max_fu_427_p3 <= 
        select_ln65_6_reg_1545 when (xor_ln65_8_fu_421_p2(0) = '1') else 
        select_ln65_7_fu_410_p3;
    xor_ln245_10_fu_678_p2 <= (tmp_20_fu_662_p3 xor ap_const_lv1_1);
    xor_ln245_11_fu_690_p2 <= (tmp_21_fu_670_p3 xor tmp_20_fu_662_p3);
    xor_ln245_12_fu_721_p2 <= (tmp_22_fu_705_p3 xor ap_const_lv1_1);
    xor_ln245_13_fu_733_p2 <= (tmp_23_fu_713_p3 xor tmp_22_fu_705_p3);
    xor_ln245_14_fu_764_p2 <= (tmp_24_fu_748_p3 xor ap_const_lv1_1);
    xor_ln245_15_fu_776_p2 <= (tmp_25_fu_756_p3 xor tmp_24_fu_748_p3);
    xor_ln245_16_fu_807_p2 <= (tmp_26_fu_791_p3 xor ap_const_lv1_1);
    xor_ln245_17_fu_819_p2 <= (tmp_27_fu_799_p3 xor tmp_26_fu_791_p3);
    xor_ln245_18_fu_850_p2 <= (tmp_28_fu_834_p3 xor ap_const_lv1_1);
    xor_ln245_19_fu_862_p2 <= (tmp_29_fu_842_p3 xor tmp_28_fu_834_p3);
    xor_ln245_1_fu_475_p2 <= (tmp_11_fu_455_p3 xor tmp_10_fu_447_p3);
    xor_ln245_2_fu_506_p2 <= (tmp_12_fu_490_p3 xor ap_const_lv1_1);
    xor_ln245_3_fu_518_p2 <= (tmp_13_fu_498_p3 xor tmp_12_fu_490_p3);
    xor_ln245_4_fu_549_p2 <= (tmp_14_fu_533_p3 xor ap_const_lv1_1);
    xor_ln245_5_fu_561_p2 <= (tmp_15_fu_541_p3 xor tmp_14_fu_533_p3);
    xor_ln245_6_fu_592_p2 <= (tmp_16_fu_576_p3 xor ap_const_lv1_1);
    xor_ln245_7_fu_604_p2 <= (tmp_17_fu_584_p3 xor tmp_16_fu_576_p3);
    xor_ln245_8_fu_635_p2 <= (tmp_18_fu_619_p3 xor ap_const_lv1_1);
    xor_ln245_9_fu_647_p2 <= (tmp_19_fu_627_p3 xor tmp_18_fu_619_p3);
    xor_ln245_fu_463_p2 <= (tmp_10_fu_447_p3 xor ap_const_lv1_1);
    xor_ln65_1_fu_286_p2 <= (icmp_ln65_1_fu_280_p2 xor ap_const_lv1_1);
    xor_ln65_2_fu_306_p2 <= (icmp_ln65_2_fu_300_p2 xor ap_const_lv1_1);
    xor_ln65_3_fu_326_p2 <= (icmp_ln65_3_fu_320_p2 xor ap_const_lv1_1);
    xor_ln65_4_fu_346_p2 <= (icmp_ln65_4_fu_340_p2 xor ap_const_lv1_1);
    xor_ln65_5_fu_366_p2 <= (icmp_ln65_5_fu_360_p2 xor ap_const_lv1_1);
    xor_ln65_6_fu_386_p2 <= (icmp_ln65_6_fu_380_p2 xor ap_const_lv1_1);
    xor_ln65_7_fu_404_p2 <= (icmp_ln65_7_fu_400_p2 xor ap_const_lv1_1);
    xor_ln65_8_fu_421_p2 <= (icmp_ln65_8_fu_416_p2 xor ap_const_lv1_1);
    xor_ln65_fu_266_p2 <= (icmp_ln65_fu_260_p2 xor ap_const_lv1_1);
    zext_ln255_1_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_3_fu_917_p3),64));
    zext_ln255_2_fu_956_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_5_fu_948_p3),64));
    zext_ln255_3_fu_1143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_7_reg_1566),64));
    zext_ln255_4_fu_1147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_9_reg_1571),64));
    zext_ln255_5_fu_1151_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_11_reg_1576),64));
    zext_ln255_6_fu_1155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_13_reg_1581),64));
    zext_ln255_7_fu_1159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_15_reg_1586),64));
    zext_ln255_8_fu_1163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_17_reg_1591),64));
    zext_ln255_9_fu_1167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_19_reg_1596),64));
    zext_ln255_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln245_1_fu_886_p3),64));
    zext_ln265_fu_1232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_1222_p4),64));
end behav;
