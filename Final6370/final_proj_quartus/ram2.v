// megafunction wizard: %RAM initializer%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: ALTMEM_INIT 

// ============================================================
// File Name: ram2.v
// Megafunction Name(s):
// 			ALTMEM_INIT
//
// Simulation Library Files(s):
// 			lpm
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 22.1std.2 Build 922 07/20/2023 SC Lite Edition
// ************************************************************


//Copyright (C) 2023  Intel Corporation. All rights reserved.
//Your use of Intel Corporation's design tools, logic functions 
//and other software and tools, and any partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Intel Program License 
//Subscription Agreement, the Intel Quartus Prime License Agreement,
//the Intel FPGA IP License Agreement, or other applicable license
//agreement, including, without limitation, that your use is for
//the sole purpose of programming logic devices manufactured by
//Intel and sold by Intel or its authorized distributors.  Please
//refer to the applicable agreement for further details, at
//https://fpgasoftware.intel.com/eula.


//altmem_init CBX_AUTO_BLACKBOX="ALL" DEVICE_FAMILY="Cyclone V" INIT_FILE="myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config10_soc_system/syn/myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config10_s_invert_table_Rcud.mif" INIT_TO_ZERO="NO" NUMWORDS=1024 PORT_ROM_DATA_READY="PORT_UNUSED" ROM_READ_LATENCY=1 WIDTH=18 WIDTHAD=10 clock dataout init init_busy ram_address ram_wren
//VERSION_BEGIN 22.1 cbx_altera_syncram_nd_impl 2023:07:21:07:12:20:SC cbx_altmem_init 2023:07:21:07:12:21:SC cbx_altsyncram 2023:07:21:07:12:21:SC cbx_cycloneii 2023:07:21:07:12:21:SC cbx_lpm_add_sub 2023:07:21:07:12:21:SC cbx_lpm_compare 2023:07:21:07:12:21:SC cbx_lpm_counter 2023:07:21:07:12:21:SC cbx_lpm_decode 2023:07:21:07:12:20:SC cbx_lpm_mux 2023:07:21:07:12:21:SC cbx_mgl 2023:07:21:07:12:36:SC cbx_nadder 2023:07:21:07:12:21:SC cbx_stratix 2023:07:21:07:12:21:SC cbx_stratixii 2023:07:21:07:12:21:SC cbx_stratixiii 2023:07:21:07:12:21:SC cbx_stratixv 2023:07:21:07:12:21:SC cbx_util_mgl 2023:07:21:07:12:21:SC  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463


//synthesis_resources = altsyncram 1 lpm_compare 2 lpm_counter 2 reg 14 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  ram2_meminit_mj61
	( 
	clock,
	dataout,
	init,
	init_busy,
	ram_address,
	ram_wren) ;
	input   clock;
	output   [17:0]  dataout;
	input   init;
	output   init_busy;
	output   [9:0]  ram_address;
	output   ram_wren;

	wire  [17:0]   wire_int_rom_q_a;
	reg	[0:0]	capture_init;
	reg	[9:0]	delay_addr;
	wire	[9:0]	wire_delay_addr_ena;
	wire	[2:0]	wire_state_reg_d;
	reg	[2:0]	state_reg;
	wire	[2:0]	wire_state_reg_sclr;
	wire	[2:0]	wire_state_reg_sload;
	wire  wire_addr_cmpr_aeb;
	wire  wire_addr_cmpr_alb;
	wire  wire_wait_cmpr_aeb;
	wire  wire_wait_cmpr_alb;
	wire  [9:0]   wire_addr_ctr_q;
	wire  [0:0]   wire_wait_ctr_q;
	wire  [0:0]  addrct_eq_numwords;
	wire  [0:0]  addrct_lt_numwords;
	wire clken;
	wire  [17:0]  dataout_w;
	wire  [0:0]  done_state;
	wire  [0:0]  idle_state;
	wire  [0:0]  ram_write_state;
	wire  [0:0]  reset_state_machine;
	wire  [0:0]  rom_addr_state;
	wire  [0:0]  rom_data_capture_state;
	wire  [0:0]  state_machine_clken;
	wire  [0:0]  waitct_eq_latency;
	wire  [0:0]  waitct_lt_latency;

	altsyncram   int_rom
	( 
	.address_a(wire_addr_ctr_q),
	.clock0(clock),
	.clocken0(clken),
	.eccstatus(),
	.q_a(wire_int_rom_q_a),
	.q_b(),
	.rden_a(rom_data_capture_state)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr0(1'b0),
	.aclr1(1'b0),
	.address_b({1{1'b1}}),
	.addressstall_a(1'b0),
	.addressstall_b(1'b0),
	.byteena_a({1{1'b1}}),
	.byteena_b({1{1'b1}}),
	.clock1(1'b1),
	.clocken1(1'b1),
	.clocken2(1'b1),
	.clocken3(1'b1),
	.data_a({18{1'b1}}),
	.data_b({1{1'b1}}),
	.rden_b(1'b1),
	.wren_a(1'b0),
	.wren_b(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		int_rom.init_file = "soc_system/syn/myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config10_s_invert_table_Rcud.mif",
		int_rom.numwords_a = 1024,
		int_rom.operation_mode = "ROM",
		int_rom.width_a = 18,
		int_rom.widthad_a = 10,
		int_rom.intended_device_family = "Cyclone V",
		int_rom.lpm_type = "altsyncram";
	// synopsys translate_off
	initial
		capture_init = 0;
	// synopsys translate_on
	always @ ( posedge clock)
		if (clken == 1'b1)   capture_init <= ((init | capture_init) & (~ done_state));
	// synopsys translate_off
	initial
		delay_addr[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge clock)
		if (wire_delay_addr_ena[0:0] == 1'b1)   delay_addr[0:0] <= wire_addr_ctr_q[0:0];
	// synopsys translate_off
	initial
		delay_addr[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge clock)
		if (wire_delay_addr_ena[1:1] == 1'b1)   delay_addr[1:1] <= wire_addr_ctr_q[1:1];
	// synopsys translate_off
	initial
		delay_addr[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge clock)
		if (wire_delay_addr_ena[2:2] == 1'b1)   delay_addr[2:2] <= wire_addr_ctr_q[2:2];
	// synopsys translate_off
	initial
		delay_addr[3:3] = 0;
	// synopsys translate_on
	always @ ( posedge clock)
		if (wire_delay_addr_ena[3:3] == 1'b1)   delay_addr[3:3] <= wire_addr_ctr_q[3:3];
	// synopsys translate_off
	initial
		delay_addr[4:4] = 0;
	// synopsys translate_on
	always @ ( posedge clock)
		if (wire_delay_addr_ena[4:4] == 1'b1)   delay_addr[4:4] <= wire_addr_ctr_q[4:4];
	// synopsys translate_off
	initial
		delay_addr[5:5] = 0;
	// synopsys translate_on
	always @ ( posedge clock)
		if (wire_delay_addr_ena[5:5] == 1'b1)   delay_addr[5:5] <= wire_addr_ctr_q[5:5];
	// synopsys translate_off
	initial
		delay_addr[6:6] = 0;
	// synopsys translate_on
	always @ ( posedge clock)
		if (wire_delay_addr_ena[6:6] == 1'b1)   delay_addr[6:6] <= wire_addr_ctr_q[6:6];
	// synopsys translate_off
	initial
		delay_addr[7:7] = 0;
	// synopsys translate_on
	always @ ( posedge clock)
		if (wire_delay_addr_ena[7:7] == 1'b1)   delay_addr[7:7] <= wire_addr_ctr_q[7:7];
	// synopsys translate_off
	initial
		delay_addr[8:8] = 0;
	// synopsys translate_on
	always @ ( posedge clock)
		if (wire_delay_addr_ena[8:8] == 1'b1)   delay_addr[8:8] <= wire_addr_ctr_q[8:8];
	// synopsys translate_off
	initial
		delay_addr[9:9] = 0;
	// synopsys translate_on
	always @ ( posedge clock)
		if (wire_delay_addr_ena[9:9] == 1'b1)   delay_addr[9:9] <= wire_addr_ctr_q[9:9];
	assign
		wire_delay_addr_ena = {10{(clken & rom_data_capture_state)}};
	// synopsys translate_off
	initial
		state_reg[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge clock)
		if (state_machine_clken == 1'b1) 
			if (wire_state_reg_sclr[0:0] == 1'b1) state_reg[0:0] <= 1'b0;
			else if (wire_state_reg_sload[0:0] == 1'b1) state_reg[0:0] <= 1;
			else  state_reg[0:0] <= wire_state_reg_d[0:0];
	// synopsys translate_off
	initial
		state_reg[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge clock)
		if (state_machine_clken == 1'b1) 
			if (wire_state_reg_sclr[1:1] == 1'b1) state_reg[1:1] <= 1'b0;
			else if (wire_state_reg_sload[1:1] == 1'b1) state_reg[1:1] <= 1;
			else  state_reg[1:1] <= wire_state_reg_d[1:1];
	// synopsys translate_off
	initial
		state_reg[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge clock)
		if (state_machine_clken == 1'b1) 
			if (wire_state_reg_sclr[2:2] == 1'b1) state_reg[2:2] <= 1'b0;
			else if (wire_state_reg_sload[2:2] == 1'b1) state_reg[2:2] <= 1;
			else  state_reg[2:2] <= wire_state_reg_d[2:2];
	assign
		wire_state_reg_d = {(((~ state_reg[2]) & state_reg[1]) & state_reg[0]), ((~ state_reg[2]) & (state_reg[1] ^ state_reg[0])), ((~ state_reg[2]) & (~ state_reg[0]))};
	assign
		wire_state_reg_sclr = {{2{reset_state_machine}}, 1'b0},
		wire_state_reg_sload = {{2{1'b0}}, reset_state_machine};
	lpm_compare   addr_cmpr
	( 
	.aeb(wire_addr_cmpr_aeb),
	.agb(),
	.ageb(),
	.alb(wire_addr_cmpr_alb),
	.aleb(),
	.aneb(),
	.dataa(delay_addr),
	.datab({10{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		addr_cmpr.lpm_width = 10,
		addr_cmpr.lpm_type = "lpm_compare";
	lpm_compare   wait_cmpr
	( 
	.aeb(wire_wait_cmpr_aeb),
	.agb(),
	.ageb(),
	.alb(wire_wait_cmpr_alb),
	.aleb(),
	.aneb(),
	.dataa(wire_wait_ctr_q),
	.datab(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		wait_cmpr.lpm_width = 1,
		wait_cmpr.lpm_type = "lpm_compare";
	lpm_counter   addr_ctr
	( 
	.clk_en(clken),
	.clock(clock),
	.cnt_en(ram_write_state),
	.cout(),
	.eq(),
	.q(wire_addr_ctr_q),
	.sclr(((~ state_reg[1]) & (~ state_reg[0])))
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.aload(1'b0),
	.aset(1'b0),
	.cin(1'b1),
	.data({10{1'b0}}),
	.sload(1'b0),
	.sset(1'b0),
	.updown(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		addr_ctr.lpm_direction = "UP",
		addr_ctr.lpm_modulus = 1024,
		addr_ctr.lpm_port_updown = "PORT_UNUSED",
		addr_ctr.lpm_width = 10,
		addr_ctr.lpm_type = "lpm_counter";
	lpm_counter   wait_ctr
	( 
	.clk_en(clken),
	.clock(clock),
	.cnt_en(rom_addr_state),
	.cout(),
	.eq(),
	.q(wire_wait_ctr_q),
	.sclr((~ rom_addr_state))
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.aload(1'b0),
	.aset(1'b0),
	.cin(1'b1),
	.data({1{1'b0}}),
	.sload(1'b0),
	.sset(1'b0),
	.updown(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		wait_ctr.lpm_direction = "UP",
		wait_ctr.lpm_modulus = 1,
		wait_ctr.lpm_port_updown = "PORT_UNUSED",
		wait_ctr.lpm_width = 1,
		wait_ctr.lpm_type = "lpm_counter";
	assign
		addrct_eq_numwords = wire_addr_cmpr_aeb,
		addrct_lt_numwords = wire_addr_cmpr_alb,
		clken = 1'b1,
		dataout = dataout_w,
		dataout_w = wire_int_rom_q_a,
		done_state = ((state_reg[2] & (~ state_reg[1])) & (~ state_reg[0])),
		idle_state = (((~ state_reg[2]) & (~ state_reg[1])) & (~ state_reg[0])),
		init_busy = capture_init,
		ram_address = delay_addr,
		ram_wren = ram_write_state,
		ram_write_state = (((~ state_reg[2]) & state_reg[1]) & state_reg[0]),
		reset_state_machine = (ram_write_state & addrct_lt_numwords),
		rom_addr_state = (((~ state_reg[2]) & (~ state_reg[1])) & state_reg[0]),
		rom_data_capture_state = (((~ state_reg[2]) & state_reg[1]) & (~ state_reg[0])),
		state_machine_clken = (clken & ((idle_state & capture_init) | ((rom_data_capture_state | done_state) | (capture_init & (((~ (rom_addr_state & waitct_lt_latency)) | (rom_addr_state & waitct_eq_latency)) | (ram_write_state & addrct_eq_numwords)))))),
		waitct_eq_latency = wire_wait_cmpr_aeb,
		waitct_lt_latency = wire_wait_cmpr_alb;
endmodule //ram2_meminit_mj61
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module ram2 (
	clock,
	init,
	dataout,
	init_busy,
	ram_address,
	ram_wren);

	input	  clock;
	input	  init;
	output	[17:0]  dataout;
	output	  init_busy;
	output	[9:0]  ram_address;
	output	  ram_wren;

	wire [17:0] sub_wire0;
	wire  sub_wire1;
	wire [9:0] sub_wire2;
	wire  sub_wire3;
	wire [17:0] dataout = sub_wire0[17:0];
	wire  init_busy = sub_wire1;
	wire [9:0] ram_address = sub_wire2[9:0];
	wire  ram_wren = sub_wire3;

	ram2_meminit_mj61	ram2_meminit_mj61_component (
				.clock (clock),
				.init (init),
				.dataout (sub_wire0),
				.init_busy (sub_wire1),
				.ram_address (sub_wire2),
				.ram_wren (sub_wire3));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: LIBRARY: altera_mf altera_mf.altera_mf_components.all
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone V"
// Retrieval info: CONSTANT: INIT_FILE STRING "myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config10_soc_system/syn/myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config10_s_invert_table_Rcud.mif"
// Retrieval info: CONSTANT: INIT_TO_ZERO STRING "NO"
// Retrieval info: CONSTANT: INTENDED_DEVICE_FAMILY STRING "Cyclone V"
// Retrieval info: CONSTANT: LPM_HINT STRING "UNUSED"
// Retrieval info: CONSTANT: LPM_TYPE STRING "altmem_init"
// Retrieval info: CONSTANT: NUMWORDS NUMERIC "1024"
// Retrieval info: CONSTANT: PORT_ROM_DATA_READY STRING "PORT_UNUSED"
// Retrieval info: CONSTANT: ROM_READ_LATENCY NUMERIC "1"
// Retrieval info: CONSTANT: WIDTH NUMERIC "18"
// Retrieval info: CONSTANT: WIDTHAD NUMERIC "10"
// Retrieval info: USED_PORT: clock 0 0 0 0 INPUT NODEFVAL "clock"
// Retrieval info: CONNECT: @clock 0 0 0 0 clock 0 0 0 0
// Retrieval info: USED_PORT: dataout 0 0 18 0 OUTPUT NODEFVAL "dataout[17..0]"
// Retrieval info: CONNECT: dataout 0 0 18 0 @dataout 0 0 18 0
// Retrieval info: USED_PORT: init 0 0 0 0 INPUT NODEFVAL "init"
// Retrieval info: CONNECT: @init 0 0 0 0 init 0 0 0 0
// Retrieval info: USED_PORT: init_busy 0 0 0 0 OUTPUT NODEFVAL "init_busy"
// Retrieval info: CONNECT: init_busy 0 0 0 0 @init_busy 0 0 0 0
// Retrieval info: USED_PORT: ram_address 0 0 10 0 OUTPUT NODEFVAL "ram_address[9..0]"
// Retrieval info: CONNECT: ram_address 0 0 10 0 @ram_address 0 0 10 0
// Retrieval info: USED_PORT: ram_wren 0 0 0 0 OUTPUT NODEFVAL "ram_wren"
// Retrieval info: CONNECT: ram_wren 0 0 0 0 @ram_wren 0 0 0 0
// Retrieval info: GEN_FILE: TYPE_NORMAL ram2.v TRUE FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL ram2.qip TRUE FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL ram2.bsf TRUE TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL ram2_inst.v TRUE TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL ram2_bb.v TRUE TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL ram2.inc TRUE TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL ram2.cmp TRUE TRUE
// Retrieval info: LIB_FILE: lpm
